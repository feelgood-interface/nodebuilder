---
to: src/output/<%= pascalCase(metaParams.serviceName) %>.node.ts
---
<%_ const builder = new Builder(mainParams, metaParams); _%>
<%_ const helper = new Helper(); _%>
import {
	IExecuteFunctions,
} from 'n8n-core';

import {
	IDataObject,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
} from 'n8n-workflow';

import {
<%= builder.genericFunctionsImports(); %>
} from './GenericFunctions';

import {
<%_ builder.resourceNames.forEach((resourceName) => { _%>
	<%= helper.camelCase(resourceName) %>Fields,
	<%= helper.camelCase(resourceName) %>Operations,
<%_ }); _%>
} from './descriptions';

export class <%= helper.pascalCase(metaParams.serviceName); %> implements INodeType {
	description: INodeTypeDescription = {
		displayName: '<%= metaParams.serviceName %>',
		name: '<%= helper.camelCase(metaParams.serviceName) %>',
		icon: 'file:<%= helper.camelCase(metaParams.serviceName) %>.png',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: 'Consume the <%= metaParams.serviceName %> API',
		defaults: {
			name: '<%= metaParams.serviceName %>',
			color: '<%= metaParams.nodeColor %>',
		},
		inputs: ['main'],
		outputs: ['main'],
		properties: [
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				options: [
					<%_ builder.resourceNames.forEach((resourceName) => { _%>
					{
						name: '<%= helper.titleCase(resourceName); %>',
						value: '<%= helper.camelCase(resourceName); %>',
					},
					<%_ }); _%><%#_ end resourceNames loop _%>
				],
				default: '<%= helper.camelCase(builder.resourceNames[0]) %>',
			},
			<%_ builder.resourceNames.forEach((resourceName) => { _%>
			...<%= helper.camelCase(resourceName) %>Operations,
			...<%= helper.camelCase(resourceName) %>Fields,
			<%_ }); _%><%#_ end resourceNames loop _%>
		], <%# end properties key of object at description class field %>
	}; <%# end description class field %>

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: IDataObject[] = [];

		const resource = this.getNodeParameter('resource', 0) as string;
		const operation = this.getNodeParameter('operation', 0) as string;

		let responseData;

		for (let i = 0; i < items.length; i++) {
			<%_ builder.resourceTuples.forEach(([resourceName, operationsArray]) => { %>
			<%- builder.resourceBranch(resourceName); %>

				<%= builder.resourceDivider(helper.camelCase(resourceName)); %>

				<%_ operationsArray.forEach(operation => { _%>
				<%- builder.operationBranch(resourceName, operation); %>

					<%= builder.operationDivider(helper.camelCase(resourceName), operation.operationId, operation.operationUrl); %>

					<%- builder.apiCall(operation); _%>

				<%- builder.operationError(resourceName, operation, { enabled: false }); _%>

			<%_ }); _%> <%#_ end operationsArray loop _%>
			<%- builder.resourceError(resourceName, { enabled: false }); _%>
			<%_ }); _%> <%#_ end resourceTuples loop _%>


			Array.isArray(responseData)
				? returnData.push(...responseData)
				: returnData.push(responseData);

		}

		return [this.helpers.returnJsonArray(returnData)];
	}
} <%# end class %>