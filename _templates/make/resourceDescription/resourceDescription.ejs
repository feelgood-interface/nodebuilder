---
to: src/output/resources/<%= helpers.pascalCase(resourceName) %>Description.ts
---
import {
	INodeProperties,
} from 'n8n-workflow';

export const <%= helpers.camelCase(resourceName) %>Operations = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		displayOptions: {
			show: {
				resource: [
					'<%= helpers.camelCase(resourceName) %>',
				],
			},
		},
		options: [
			<%_ resourceObject.forEach(operation => { _%>
			{
				name: '<%= helpers.capitalCase(operation.operationId) %>',
				value: '<%= helpers.camelCase(operation.operationId) %>',
				description: '<%- helpers.escape(operation.description) %>',
			},
			<%_ }); _%> <%#_ end operations loop _%>
		],
		default: '<%= helpers.camelCase(resourceObject[0].operationId) %>',
		description: 'Operation to perform',
	},
] as INodeProperties[];

export const <%= helpers.camelCase(resourceName) %>Fields = [
	<%_ resourceObject.forEach(operation => { _%>
		<%_/**
		* **********************
		* PARAMETERS
		* **********************
		*/_%>
	 <%_ if (operation.parameters) { _%>
	 <%_ operation.parameters.forEach(parameter => { _%>
	{
		displayName: '<%= parameter.name %>',
		name: '<%= helpers.camelCase(parameter.name) %>',
		description: '<%= parameter.description %>',
		type: '<%= parameter.schema.type %>',
		<%_ if (helpers.hasMinMax(parameter.schema)) { _%>
		typeOptions: {
			minValue: <%= parameter.schema.minimum %>,
			maxValue: <%= parameter.schema.maximum %>
		},
		<%_ } _%>
		required: true,
		default: '<%= helpers.getDefault(parameter.schema) %>',
		displayOptions: {
			show: {
				resource: [
					'<%= helpers.camelCase(resourceName) %>',
				],
				operation: [
					'<%= helpers.camelCase(operation.operationId) %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end parameters loop _%>
	<%_ } _%> <%#_ end parameters if _%>
	<%_/**
	* **********************
	* REQUEST BODY
	* **********************
	*/_%>
	<%_ if (operation.requestBody) { _%>
	<%_ operation.requestBody.forEach(requestBody => { _%>
	<%_ Object.keys(requestBody.content).forEach((mimeType) => { _%>
	<%_ if (mimeType === "text/plain") { _%>
	{
		displayName: 'Text',
		name: 'text',
		description: '<%= requestBody.description %>',
		required: true,
		default: '',
		displayOptions: {
			show: {
				resource: [
					'<%= helpers.camelCase(resourceName) %>',
				],
				operation: [
					'<%= helpers.camelCase(operation.operationId) %>',
				],
			},
		},
	},
	<%_ } else if (mimeType === "application/x-www-form-urlencoded") { _%>
	<%_ const schema = requestBody.content[mimeType].schema; _%>
	<%_ Object.keys(schema.properties).forEach((propertyName) => { _%>
	<%_ const property = schema.properties[propertyName]; _%>
	{
		displayName: '<%= propertyName %>',
		name: '<%= helpers.camelCase(propertyName) %>',
		<%_ if (property.description) { _%>
		description: '<%- helpers.escape(property.description) %>',
		<%_ } _%>
		type: '<%= property.type %>',
		<%_ if (helpers.hasMinMax(property)) { _%>
		typeOptions: {
			minValue: <%= property.minimum %>,
			maxValue: <%= property.maximum %>
		},
		<%_ } _%>
		required: true,
		default: <%_ if (property.type === "string") { _%>
			<%_ %> '<%= helpers.getDefault(property) _%>',
			<%_ } else { _%>
			<%_ %> <%= helpers.getDefault(property) _%>,
			<%_ } _%>
		displayOptions: {
			show: {
				resource: [
					'<%= helpers.camelCase(resourceName) %>',
				],
				operation: [
					'<%= helpers.camelCase(operation.operationId) %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end properties loop _%>
	<%_ } _%> <%#_ end mimeType if _%>
	<%_ }); _%> <%#_ end mimeTypeObj loop _%>
	<%_ }); _%> <%#_ end requestBody loop _%>
	<%_ } _%> <%#_ end requestBody if _%>
	<%_/**
	* **********************
	* ADDITIONAL FIELDS
	* **********************
	*/_%>
	<%_ if (operation.additionalFields) { _%>
	{
		displayName: 'Additional Fields',
		name: 'additionalFields',
		type: 'collection',
		default: {},
		displayOptions: {
			show: {
				resource: [
					'<%= helpers.camelCase(resourceName) %>',
				],
				operation: [
					'<%= helpers.camelCase(operation.operationId) %>',
				],
			},
		},
		options: [
		<%_ operation.additionalFields.options.forEach(option => { _%>
			{
				name: '<%= option.name %>',
				<%_ if (option.description) { _%>
				description: '<%- helpers.escape(option.description) %>',
				<%_ } _%>
				type: '<%= option.type %>',
				default: <%_ if (typeof option.default === "string") { _%>
				<%_ %> '<%= helpers.getDefault(option) _%>',
				<%_ } else { _%>
				<%_ %> <%= helpers.getDefault(option) _%>,
				<%_ } _%>
			},
		<%_ }); _%> <%#_ end options loop _%>
		]
	},
	 <%_ } _%> <%#_ end additionalFields if _%>
<%_ }); _%> <%#_ end operations loop _%>
] as INodeProperties[];