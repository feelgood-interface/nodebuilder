---
to: src/output/GenericFunctions.ts
---
<%_ const helper = new Helper(); _%>
<%_ const serviceName = helper.camelCase(metaParams.serviceName); _%>
<%_ const credentialsName = helper.getCredentialsString(metaParams.serviceName, metaParams.authType); _%>
import type {
	IExecuteFunctions,
} from 'n8n-core';
import type {
	IDataObject,
} from 'n8n-workflow';
import {
	NodeApiError,
	NodeOperationError,
} from 'n8n-workflow';
import type {
	OptionsWithUri,
} from 'request';

export async function <%= serviceName %>ApiRequest(
	this: IExecuteFunctions,
	method: string,
	endpoint: string,
	body: IDataObject = {},
	qs: IDataObject = {},
	uri?: string,
) {
	const options: OptionsWithUri = {
		headers: {},
		method,
		body,
		qs,
		uri: uri ?? `<%= metaParams.apiUrl; %>${endpoint}`,
		json: true,
	};

	<%_ if (metaParams.authType !== "None") { _%>
	const credentials = await this.getCredentials('<%= credentialsName %>');

	if (credentials === undefined) {
		throw new NodeOperationError(this.getNode(), 'No credentials got returned!');
	}
	<%_ } _%>

	if (!Object.keys(body).length) {
		delete options.body;
	}

	if (!Object.keys(qs).length) {
		delete options.qs;
	}

	try {
		<%_ if (metaParams.authType === "OAuth2") { _%>
		return await this.helpers.requestOAuth2.call(this, '<%= credentialsName %>', options);
		<%_ } else { _%>
		return await this.helpers.request(options);
		<%_ } _%>
	} catch (error) {
		throw new NodeApiError(this.getNode(), error);
	}
}

export async function <%= serviceName %>ApiRequestAllItems(
	this: IExecuteFunctions,
	method: string,
	endpoint: string,
	body: IDataObject = {},
	qs: IDataObject = {},
) {
	const returnData: IDataObject[] = [];
	let responseData: any;

	do {
		responseData = await <%= serviceName %>ApiRequest.call(this, method, endpoint, body, qs);
		// USERTASK: Get next page
		returnData.push(...responseData);
	} while (
		true // USERTASK: Add condition for total not yet reached
	);

	return returnData;
}

export async function handleListing(
	this: IExecuteFunctions,
	method: string,
	endpoint: string,
	body: IDataObject = {},
	qs: IDataObject = {},
) {
	const returnAll = this.getNodeParameter('returnAll', 0) as boolean;

	if (returnAll) {
		return await <%= serviceName %>ApiRequestAllItems.call(this, method, endpoint, body, qs);
	}

	const responseData = await <%= serviceName %>ApiRequestAllItems.call(this, method, endpoint, body, qs);
	const limit = this.getNodeParameter('limit', 0) as number;

	return responseData.slice(0, limit);
}
