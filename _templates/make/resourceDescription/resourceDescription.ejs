---
to: src/output/descriptions/<%= pascalCase(resourceName) %>Description.ts
---
<%_ const helper = new Helper(); _%>
import {
	INodeProperties,
} from 'n8n-workflow';

export const <%= helper.camelCase(resourceName) %>Operations = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName) %>',
				],
			},
		},
		options: [
			<%_ operationsArray.forEach(operation => { _%>
			{
				name: '<%= helper.capitalCase(operation.operationId) %>',
				value: '<%= helper.camelCase(operation.operationId) %>',
				<%_ if (operation.description) { _%>
				description: '<%- helper.escape(operation.description) %>',
				<%_ } _%>
			},
			<%_ }); _%>
		],
		default: '<%= helper.camelCase(operationsArray[0].operationId) %>',
		description: 'Operation to perform',
	},
] as INodeProperties[];

export const <%= helper.camelCase(resourceName) %>Fields = [
	<%_ operationsArray.forEach(operation => { _%>
	<%_/**
	 * **********************
	 * PARAMETERS
	 * **********************
	 */_%>
	<%_ if (operation.parameters) { _%>
	<%_ operation.parameters.forEach(parameter => { _%>
	{
		displayName: '<%= helper.titleCase(parameter.name); %>',
		name: '<%= helper.camelCase(parameter.name); %>',
		description: '<%= parameter.description; %>',
		type: '<%= helper.adjustType(parameter.schema.type); %>',
		<%_ if (helper.hasMinMax(parameter.schema)) { _%>
		typeOptions: {
			minValue: <%= parameter.schema.minimum %>,
			maxValue: <%= parameter.schema.maximum %>
		},
		<%_ } _%>
		required: true,
		default: <%- helper.getDefault(parameter.schema); %>,
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end parameters loop _%>
	<%_ } _%> <%#_ end parameters if _%>
	<%_/**
	 * **********************
	 * REQUEST BODY
	 * **********************
	 */_%>
	<%_ if (operation.requestBody) { _%>
	<%_ operation.requestBody.forEach((rbItem) => { _%>
	<%_ Object.keys(rbItem.content).forEach((mimeType) => { _%>
	<%_ if (mimeType === "application/x-www-form-urlencoded") { _%>
	<%_ const schema = rbItem.content[mimeType].schema; _%>
	<%_ Object.keys(schema.properties).forEach((propertyName) => { _%>
	<%_ const property = schema.properties[propertyName]; _%>
	{
		displayName: '<%= helper.titleCase(propertyName); %>',
		name: '<%= helper.camelCase(propertyName); %>',
		<%_ if (property.description) { _%>
		description: '<%- helper.escape(property.description) %>',
		<%_ } _%>
		type: '<%= helper.adjustType(property.type); %>',
		<%_ if (helper.hasMinMax(property)) { _%>
		typeOptions: {
			minValue: <%= property.minimum %>,
			maxValue: <%= property.maximum %>
		},
		<%_ } _%>
		required: <%= rbItem.required %>,
		default: <%- helper.getDefault(property); %>,
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end properties loop _%>
	<%_ } _%> <%#_ end mimeType if _%>
	<%_ }); _%> <%#_ end mimeType loop _%>
	<%_ }); _%> <%#_ end rbItem loop _%>
	<%_ } _%> <%#_ end requestBody if _%>
	<%_/**
	 * **********************
	 * ADDITIONAL FIELDS
	 * **********************
	 */_%>
	<%_ if (operation.additionalFields) { _%>
	{
		displayName: 'Additional Fields',
		name: 'additionalFields',
		type: 'collection',
		default: {},
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
		options: [
		<%_ operation.additionalFields.options.forEach(option => { _%>
			{
				name: '<%= option.name %>',
				<%_ if (option.description) { _%>
				description: '<%- helper.escape(option.description) %>',
				<%_ } _%>
				type: '<%= helper.adjustType(option.type); %>',
				default: <%- helper.getDefault(option); %>,
			},
		<%_ }); _%> <%#_ end options loop _%>
		]
	},
	<%_ } _%> <%#_ end additionalFields if _%>
<%_ }); _%> <%#_ end operations loop _%>
] as INodeProperties[];
