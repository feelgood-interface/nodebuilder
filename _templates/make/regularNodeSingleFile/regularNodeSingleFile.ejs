---
to: src/output/<%= helpers.pascalCase(metaParams.serviceName) %>.node.ts
---
<%_ const resourceNames = Object.keys(mainParams);
		const resourceTuples = Object.entries(mainParams);
		const isFirst = (item, arr) => arr.indexOf(item) === 0
		const isLast = (item, arr) => arr.indexOf(item) + 1 === arr.length; _%>
import {
	IExecuteFunctions,
} from 'n8n-core';

import {
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	IDataObject,
} from 'n8n-workflow';

import {
	<%= helpers.camelCase(metaParams.serviceName) %>ApiRequest,
} from './GenericFunctions';

export class <%= helpers.pascalCase(metaParams.serviceName) %> implements INodeType {
	description: INodeTypeDescription = {
		displayName: '<%= metaParams.serviceName %>',
		name: '<%= helpers.camelCase(metaParams.serviceName) %>',
		icon: 'file:<%= helpers.camelCase(metaParams.serviceName) %>.png',
		group: ['transform'],
		version: 1,
		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
		description: 'Consume <%= metaParams.serviceName %> API',
		defaults: {
			name: '<%= metaParams.serviceName %>',
			color: '<%= metaParams.nodeColor %>',
		},
		inputs: ['main'],
		outputs: ['main'],
		properties: [
			// ----------------------------------
			//         Resources
			// ----------------------------------
			{
				displayName: 'Resource',
				name: 'resource',
				type: 'options',
				options: [
					<%_ resourceNames.forEach((resourceName) => { _%>
					{
						name: '<%= resourceName %>',
						value: '<%= helpers.camelCase(resourceName) %>',
					},
					<%_ }) _%><%#_ end resourceNames loop _%>
				],
				default: '<%= resourceNames[0].toLowerCase() %>',
				description: 'Resource to consume',
			},
			// ----------------------------------
			//         Operations
			// ----------------------------------
			<%_ resourceTuples.forEach(([resourceName, operationsArray]) => { _%>
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				displayOptions: {
					show: {
						resource: [
							'<%= resourceName.toLowerCase() %>',
						],
					},
				},
				options: [
					<%_ operationsArray.forEach(operation => { _%>
					{
						name: '<%= operation.operationId %>',
						value: '<%= helpers.camelCase(operation.operationId) %>',
						description: '<%- helpers.escape(operation.description) %>',
					},
					<%_ }); _%><%#_ end operations loop _%>
				],
				default: '<%= helpers.camelCase(operationsArray[0].operationId) %>',
				description: 'Operation to perform',
			},
			<%_ }); _%><%#_ end resourceTuples loop _%>
			// ----------------------------------
			//         Fields
			// ----------------------------------
			<%_ resourceTuples.forEach(([resourceName, operationsArray]) => { _%>
      <%_ operationsArray.forEach(operation => { _%>
			<%_/**
			 * **********************
			 * PARAMETERS
			 * **********************
			 */_%>
			<%_ if (operation.parameters) { _%>
			<%_ operation.parameters.forEach(parameter => { _%>
			{
				displayName: '<%= parameter.name %>',
				name: '<%= helpers.camelCase(parameter.name) %>',
				description: '<%= parameter.description %>',
				type: '<%= parameter.schema.type %>',
				<%_ if (helpers.hasMinMax(parameter.schema)) { _%>
				typeOptions: {
					minValue: <%= parameter.schema.minimum %>,
					maxValue: <%= parameter.schema.maximum %>
				},
				<%_ } _%>
				required: true,
				default: '<%= helpers.getDefault(parameter.schema) %>',
				displayOptions: {
					show: {
						resource: [
							'<%= helpers.camelCase(resourceName) %>',
						],
						operation: [
							'<%= helpers.camelCase(operation.operationId) %>',
						],
					},
				},
			},
      <%_ }); _%> <%#_ end parameters loop _%>
      <%_ } _%> <%#_ end parameters if _%>
			<%_/**
			 * **********************
			 * REQUEST BODY
			 * **********************
       */_%>
      <%_ if (operation.requestBody) { _%>
      <%_ operation.requestBody.forEach(requestBody => { _%>
      <%_ Object.keys(requestBody.content).forEach((mimeType) => { _%>
      <%_ if (mimeType === "text/plain") { _%>
      {
        displayName: 'Text',
        name: 'text',
        description: '<%= requestBody.description %>',
        required: true,
        default: '',
				displayOptions: {
					show: {
						resource: [
							'<%= helpers.camelCase(resourceName) %>',
						],
						operation: [
							'<%= helpers.camelCase(operation.operationId) %>',
						],
					},
				},
      },
      <%_ } else if (mimeType === "application/x-www-form-urlencoded") { _%>
      <%_ const schema = requestBody.content[mimeType].schema; _%>
      <%_ Object.keys(schema.properties).forEach((propertyName) => { _%>
      <%_ const property = schema.properties[propertyName]; _%>
      {
        displayName: '<%= propertyName %>',
        name: '<%= helpers.camelCase(propertyName) %>',
        <%_ if (property.description) { _%>
        description: '<%- helpers.escape(property.description) %>',
        <%_ } _%>
        type: '<%= property.type %>',
        <%_ if (helpers.hasMinMax(property)) { _%>
        typeOptions: {
          minValue: <%= property.minimum %>,
          maxValue: <%= property.maximum %>
        },
        <%_ } _%>
        required: true,
        default: <%_ if (property.type === "string") { _%>
          <%_ %> '<%= helpers.getDefault(property) _%>',
          <%_ } else { _%>
          <%_ %> <%= helpers.getDefault(property) _%>,
          <%_ } _%>
        displayOptions: {
          show: {
            resource: [
              '<%= helpers.camelCase(resourceName) %>',
            ],
            operation: [
              '<%= helpers.camelCase(operation.operationId) %>',
            ],
          },
        },
      },
      <%_ }); _%> <%#_ end properties loop _%>
      <%_ } _%> <%#_ end mimeType if _%>
      <%_ }); _%> <%#_ end mimeTypeObj loop _%>
      <%_ }); _%> <%#_ end requestBody loop _%>
      <%_ } _%> <%#_ end requestBody if _%>
			<%_/**
			 * **********************
			 * ADDITIONAL FIELDS
			 * **********************
			 */_%>
      <%_ if (operation.additionalFields) { _%>
      {
        displayName: 'Additional Fields',
        name: 'additionalFields',
        type: 'collection',
        default: {},
        displayOptions: {
          show: {
            resource: [
              '<%= helpers.camelCase(resourceName) %>',
            ],
            operation: [
              '<%= helpers.camelCase(operation.operationId) %>',
            ],
          },
        },
        options: [
        <%_ operation.additionalFields.options.forEach(option => { _%>
          {
            name: '<%= option.name %>',
            <%_ if (option.description) { _%>
            description: '<%- helpers.escape(option.description) %>',
            <%_ } _%>
            type: '<%= option.type %>',
            default: <%_ if (typeof option.default === "string") { _%>
            <%_ %> '<%= helpers.getDefault(option) _%>',
            <%_ } else { _%>
            <%_ %> <%= helpers.getDefault(option) _%>,
            <%_ } _%>
					},
        <%_ }); _%> <%#_ end options loop _%>
        ]
      },
			<%_ } _%> <%#_ end additionalFields if _%>
	<%_ }); _%> <%#_ end operations loop _%>
	<%_ }); _%> <%#_ end resourceTuples loop _%>
		], <%# end properties key of object at description class field %>
	}; <%# end description class field %>

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: IDataObject[] = [];

		const resource = this.getNodeParameter('resource', 0) as string;
		const operation = this.getNodeParameter('operation', 0) as string;

		let responseData: any;

		for (let i = 0; i < items.length; i++) {

			let qs: IDataObject = {};
			let body: IDataObject = {};

			<%_ resourceTuples.forEach(([resourceName, operationsArray]) => { _%>
			<%_ if (isFirst(resourceName, resourceNames)) { _%>
			if (resource === '<%= helpers.camelCase(resourceName) %>') {
			<%_ } else { _%>
			} else if (resource === '<%= helpers.camelCase(resourceName) %>') {
			<%_ } _%>

			<%_ operationsArray.forEach(operation => { _%>
				<%_ if (isFirst(operation, operationsArray)) { _%>
				if (operation === '<%= helpers.camelCase(operation.operationId) %>') {
				<%_ } else { _%>
				} else if (operation === '<%= helpers.camelCase(operation.operationId) %>') {
				<%_ } _%>
					<%_/**
					* **********************
					* PARAMETERS
					* **********************
					*/_%>
					<%_ if (operation.parameters) { _%>
					<%_/**
					 * ------ Path Parameters ------
					 * */_%>
					<%_ if (helpers.hasPathParameters(operation.endpoint)) { _%>
					<% const pathParameters = helpers.getPathParameters(operation.parameters) %>
					<%_ pathParameters.forEach(pathParameter => { _%>
					const <%= pathParameter %> = this.getNodeParameter('<%= pathParameter %>', i);
					<%_ }); _%>
					const endpoint = `<%= helpers.toTemplateLiteral(operation.endpoint) _%>`;
					// PENDING API CALL
					<%_/**
					 * ------ Query Parameters ------
					 * */_%>
					<%_ } else { _%>
					// CONTINUE HERE
					const endpoint = '<%= operation.endpoint _%>';
					// PENDING API CALL
					<%_ } _%>
					<%_/**
					* **********************
					* REQUEST BODY
					* **********************
					*/_%>
					<%_ } else if (operation.requestBody) { _%>
					// PENDING EVERYTHING - REQUEST BODY
					<%_/**
					* **********************
					* ADDITIONAL FIELDS
					* **********************
					*/_%>
					<%_ } else if (operation.additionalFields) { _%>
					// PENDING EVERYTHING - ADDITIONAL FIELDS
					<%_/**
					* **************************************************
					* NO PARAMETERS OR REQUEST BODY OR ADDITIONAL FIELDS
					* **************************************************
					*/_%>
					<%_ } else { _%> <%# end if-check for parameters %>
					// PENDING EVERYTHING - NOTHING AT ALL
					<%_ } _%>

				<%_ if (isLast(operation, operationsArray)) { _%>
				} else {
					throw new Error(`Unknown operation: ${operation}`);
				}
				<%_ } _%>
			<%_ }); _%> <%#_ end operationsArray loop _%>
			<%_ if (isLast(resourceName, resourceNames)) { _%>

			} else {
				throw new Error(`Unknown resource: ${resource}`);
			}
			<%_ } _%>
			<%_ }); _%> <%#_ end resourceTuples loop _%>

			if (Array.isArray(responseData)) {
				returnData.push.apply(returnData, responseData as IDataObject[]);
			} else {
				returnData.push(responseData as IDataObject);
			}

		}

		return [this.helpers.returnJsonArray(returnData)];
	}
} <%# end class %>