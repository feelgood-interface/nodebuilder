---
to: src/output/descriptions/<%= pascalCase(resourceName) %>Description.ts
---
<%_ const helper = new Helper(); _%>
<%_ const builder = new Builder(mainParams, metaParams); _%>
import {
	INodeProperties,
} from 'n8n-workflow';

export const <%= helper.camelCase(resourceName) %>Operations: INodeProperties[] = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
			},
		},
		options: [
			<%- builder.operationsOptions(operationsArray); %>
		],
		default: '<%= helper.camelCase(operationsArray[0].operationId); %>',
	},
];

export const <%= helper.camelCase(resourceName) %>Fields: INodeProperties[] = [
	<%_ operationsArray.forEach(operation => { _%>
	<%_ if (operation.parameters) { _%>
	<%= builder.resourceDescriptionDivider(resourceName, operation.operationId); %>
	<%_ } _%>
	<%_/**
	 * **********************
	 * PATH PARAMS & QS PARAMS
	 * **********************
	 */_%>
	<%_ if (operation.parameters) { _%>
	<%_ operation.parameters.forEach(param => { _%>
	{
		displayName: '<%= helper.titleCase(param.name); %>',
		name: '<%= param.name %>',
		description: '<%- param.description; %>',
		type: '<%= helper.adjustType(param.schema.type, param.name); %>',
		<%_ if (helper.hasMinMax(param.schema)) { _%>
		typeOptions: {
			minValue: <%= param.schema.minimum %>,
			maxValue: <%= param.schema.maximum %>
		},
		<%_ } _%>
		<%_ if (param.required) { _%>
		required: true,
		<%_ } _%>
		<%_ if (param.schema.type === 'options') { _%>
		options: [
			<%_ param.schema.options.forEach(option => { _%>
			{
				name: '<%= helper.titleCase(option) %>',
				value: '<%= option %>',
			},
			<%_ }); _%>
		],
		<%_ } _%>
		<%_ if (param.schema.type === 'object' && param.schema.properties) { _%>
		placeholder: 'Add <%= helper.titleCase(param.name + " Field") %>',
		options: [
			{
				displayName: '<%= helper.titleCase(param.name + " Fields") %>',
				name: '<%= helper.addFieldsSuffix(param.name) %>',
				values: [
				<%_ Object.entries(param.schema.properties).forEach(([subKey, subValue]) => { _%>
					{
						displayName: '<%= helper.titleCase(subKey) %>',
						name: '<%= subKey %>',
						type: '<%= helper.adjustType(subValue.type, subKey); %>',
						<%_ if (helper.hasMinMax(subValue)) { _%>
						typeOptions: {
							minValue: <%= subValue.minimum %>,
							maxValue: <%= subValue.maximum %>
						},
						<%_ } _%>
						default: <%- helper.getDefault(subValue); %>,
					},
				<%_ }); _%>
				],
			},
		],
		<%_ } _%>
		default: <%- helper.getDefault(param.schema); %>,
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end parameters loop _%>
	<%_ } _%> <%#_ end parameters if _%>
	<%_/**
	 * **********************
	 * REQUEST BODY ITEMS
	 * **********************
	 */_%>
	<%_ if (operation.requestBody) { _%>
	<%_ operation.requestBody.forEach((rbItem) => { _%>
	<%_ if (rbItem.required) { _%>
	<%_ Object.keys(rbItem.content).forEach((mimeType) => { _%>
	<%_ if (mimeType === "application/x-www-form-urlencoded" || mimeType === "application/json") { _%>
	<%_ const properties = rbItem.content[mimeType].schema.properties; _%>
	<%_ Object.entries(properties).forEach(([property, value]) => { _%>
	{
		displayName: '<%= helper.titleCase(property); %>',
		name: '<%= helper.camelCase(property) %>',
		<%_ if (value.description) { _%>
		description: '<%- helper.escape(value.description); %>',
		<%_ } _%>
		type: '<%= helper.adjustType(value.type, property); %>',
		<%_ if (helper.hasMinMax(value)) { _%>
		typeOptions: {
			minValue: <%= value.minimum %>,
			maxValue: <%= value.maximum %>
		},
		<%_ } _%>
		required: true,
		default: <%- helper.getDefault(value); %>,
		<%_ if (value.type === 'options') { _%>
		options: [
			<%_ value.options.forEach(option => { _%>
			{
				name: '<%= helper.titleCase(option) %>',
				value: '<%= option %>',
			},
			<%_ }); _%>
		],
		<%_ } _%>
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
	},
	<%_ }); _%> <%#_ end properties loop _%>
	<%_ } else if (mimeType === "text/plain") { _%>
	{
		displayName: '<%= helper.titleCase(rbItem.textPlainProperty); %>',
		name: '<%= helper.camelCase(rbItem.textPlainProperty); %>',
		<%_ if (rbItem.description) { _%>
		description: '<%- helper.escape(rbItem.description); %>',
		<%_ } _%>
		type: 'string',
		required: true,
		default: '',
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
	},
	<%_ } _%> <%#_ end mimeType if _%>
	<%_ }); _%> <%#_ end mimeType loop _%>
	<%_ } else if (!rbItem.required) { _%>
	{
		displayName: '<%= rbItem.name %>',
		name: '<%= helper.camelCase(rbItem.name) %>',
		type: 'collection',
		placeholder: '<%= helper.getPlaceholder(rbItem.name); %>',
		default: {},
		displayOptions: {
			show: {
				resource: [
					'<%= helper.camelCase(resourceName); %>',
				],
				operation: [
					'<%= helper.camelCase(operation.operationId); %>',
				],
			},
		},
		options: [
			<%_ Object.keys(rbItem.content).forEach((mimeType) => { _%>
			<%_ if (mimeType === "application/x-www-form-urlencoded" || mimeType === "application/json") { _%>
			<%_ const schema = rbItem.content[mimeType].schema; _%>
			<%_ Object.entries(schema.properties).forEach(([key, value]) => { _%>
			<%_ if (value.type === 'string' || value.type === 'number' || value.type === 'boolean' || (value.type === 'object' && !value.properties)) { _%>
				<%_/**
				* non-nested field inside extraFields
				*/_%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: '<%= helper.adjustType(value.type, key); %>',
				default: <%- helper.getDefault(value); %>,
				<%_ if (value.description) { _%>
				description: '<%- helper.escape(value.description) %>',
				<%_ } _%>
			},
			<%_ } else if (value.type === 'loadOptions') { _%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'options',
				default: '',
				typeOptions: {
					loadOptionsMethod: 'get<%= helper.pascalCase(key) %>s',
				},
				description: '<%= value.description %>',
			},
			<%_ } else if (value.type === 'options') { _%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'options',
				default: '<%= value.default %>',
				<%_ if (value.description) { _%>
				description: '<%- helper.escape(value.description) %>',
				<%_ } _%>
				options: [
					<%_ value.options.forEach(option => { _%>
					{
						name: '<%= helper.titleCase(option) %>',
						value: '<%= option %>',
					},
					<%_ }); _%>
				],
			},
			<%_ } else if (Array.isArray(value) && value.length > 1) { _%>
				<%_/**
				* options (dropdown) inside extraFields
				* TODO: Is this branch working or is this now covered by the previous branch?
				*/_%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'options',
				default: '<%= Object.keys(value[0])[0] %>',
				options: [
					<%_ value.forEach(suboption => { _%>
					<%_ Object.keys(suboption).forEach(subKey => { _%>
					{
						name: '<%= helper.titleCase(subKey) %>',
						value: '<%= subKey %>',
					},
					<%_ }); _%>
					<%_ }); _%>
				],
			},
			<%_ } else if (Array.isArray(value) && value.length === 1) { _%>
				<%_/**
				* fixedCollection with multipleValues inside extraFields
				*/_%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'fixedCollection',
				default: {},
				placeholder: 'Add <%= helper.titleCase(key + " Field") %>',
				typeOptions: {
					multipleValues: true,
				},
				options: [
					{
						displayName: '<%= helper.titleCase(key + " Fields") %>',
						name: '<%= helper.addFieldsSuffix(key) %>',
						values: [
						<%_ value.forEach(i => { _%>
						<%_ Object.keys(i).forEach(subKey => { _%>
							{
								displayName: '<%= helper.titleCase(subKey) %>',
								name: '<%= subKey %>',
								type: 'string',
								default: '',
							},
						<%_ }); _%>
						<%_ }); _%>
						],
					},
				],
			},
			<%_ } else if (!value.type && !Array.isArray(value)) { _%>
				<%_/**
				* fixedCollection without multipleValues inside extraFields
				*/_%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'fixedCollection',
				default: {},
				placeholder: 'Add <%= helper.titleCase(key + " Field") %>',
				options: [
					{
						displayName: '<%= helper.titleCase(key + " Fields") %>',
						name: '<%= helper.addFieldsSuffix(key) %>',
						values: [
						<%_ Object.keys(value).forEach(subKey => { _%>
							{
								displayName: '<%= helper.titleCase(subKey) %>',
								name: '<%= subKey %>',
								type: 'string',
								default: '',
							},
						<%_ }); _%>
						],
					},
				],
			},
			<%_ } else if (value.type === 'object' && value.properties) { _%>
			{
				displayName: '<%= helper.titleCase(key); %>',
				name: '<%= key %>',
				type: 'fixedCollection',
				default: {},
				placeholder: 'Add <%= helper.titleCase(key + " Field") %>',
				options: [
					{
						displayName: '<%= helper.titleCase(key + " Fields") %>',
						name: '<%= helper.addFieldsSuffix(key) %>',
						values: [
						<%_ Object.entries(value.properties).forEach(([subKey, subValue]) => { _%>
							{
								displayName: '<%= helper.titleCase(subKey) %>',
								name: '<%= subKey %>',
								type: '<%= helper.adjustType(subValue.type, subKey); %>',
								<%_ if (helper.hasMinMax(subValue)) { _%>
								typeOptions: {
									minValue: <%= subValue.minimum %>,
									maxValue: <%= subValue.maximum %>
								},
								<%_ } _%>
								default: <%- helper.getDefault(subValue); %>,
							},
						<%_ }); _%>
						],
					},
				],
			},
			<%_ } _%>
			<%_ }); _%> <%#_ end properties loop _%>
			<%_ } _%> <%#_ end mimeType if _%>
			<%_ }); _%> <%#_ end mimeType loop _%>
		],
	},
	<%_ } _%> <%#_ end rbItem.required if _%>
	<%_ }); _%> <%#_ end rbItem loop _%>
	<%_ } _%> <%#_ end requestBody if _%>
	<%_ if (operation.operationId === 'getAll') { _%>
	<%- builder.getAllAdditions(resourceName, operation.operationId); %>
	<%_ } _%>
<%_ }); _%> <%#_ end operations loop _%>
];
